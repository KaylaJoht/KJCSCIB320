-- Query 1
/*
	This view corresponds to the first query on the list of queries we were supposed to generate.
	It produces a "Student Transcript" That displays every class a student had taken, when they took it, and their grade.
	You enter a student you want to look up, and you should get their student transcript for every year.
*/

drop view Query1
create view query1 as
select Students.StudentID, Studentfname + ' ' + StudentLname as studentName, courseoffering.SemesterID, Majorname, Minorname, CourseSubject, CourseNumber, Level, CourseName, CreditHOurs, Grade
from Course inner join courseoffering
on course.courseid = courseoffering.courseid
inner join studentgrades
on studentgrades.courseofferingid = courseoffering.courseofferingid
inner join studentmajor
on studentmajor.studentid = studentgrades.studentid
inner join Major
on StudentMajor.majorid = major.Majorid
inner join studentminor
on studentmajor.studentid = studentminor.studentid
inner join Minors 
on studentMinor.MInorid = minors.minorid
inner join students
on students.studentid = studentgrades.studentid

--Query 2
/*
	This view corresponds to the second Query we were supposed to generate.
	The view generates the amount of students in each classification and each major, by semester
	If you call the view and specify each semester you should get the information it holds.
*/

drop view Query2
create view Query2 as
select Classification, SemesterName + ' ' + cast(SemesterYear as varchar) as SchoolYear, MajorName, count(standing.studentid) as NOofStudents
from Standing inner join StudentMajor
on Standing.StudentID = StudentMajor.studentID
inner join Major
on StudentMajor.MajorID = Major.MajorID
inner join Semester 
on Semester.SemesterID = Standing.SemesterID
group by Classification, SemesterName + ' ' + cast(SemesterYear as varchar), MajorName


-- Query3
/*
	This view corresponds to the third Query we were supposed to generate. 
	The view returns the number of students and classes taught by Professor for each Semester
	Query31 returns the amount of courses taught by each professor per semester 
	Query32 returns the specific classes and number of students in each class by professor and semester.
	Query33 adds the amount of students found in Query32 and adds them to the information generated by Query31
	Query3 Merges Query32 and Query33 to display all the courses taught by a professor per semester, and the total number of students.
	You can search by SemesterID or by ProfName to see the desired information
*/
drop view Query31
drop view Query32
drop view Query33
drop view Query3
create view Query31 as
select Semester.SemesterID, ProfessorFName + ' ' + ProfessorLName as ProfName, count(Course.CourseID) as CoursesTaught
from Professors inner join CourseOffering
on Professors.ProfessorID = CourseOffering.ProfessorID
inner join Course
on CourseOffering.CourseID = course.CourseID
inner join Semester
on courseoffering.SemesterID = Semester.SemesterID
where courseSubject IN ('CSCI', 'ISAT')
Group by Semester.SemesterID, ProfessorFName + ' ' + ProfessorLName

create view Query32 as
select  Semester.SemesterID, ProfessorFName + ' ' + ProfessorLName as ProfName, CourseSubject, CourseNumber, Count(StudentID) as AmountofStudents
from CourseOffering inner join StudentGrades
on CourseOffering.CourseOfferingID = StudentGrades.CourseOfferingID
inner join Course
on Course.CourseID = CourseOffering.CourseID
inner join Professors
on Professors.ProfessorID = CourseOffering.ProfessorID
inner join Semester
on courseoffering.SemesterID = Semester.SemesterID
where CourseSubject IN ('CSCI', 'ISAT')
group by Semester.SemesterID,ProfessorFName + ' ' + ProfessorLName, CourseSubject, CourseNumber
order by CourseNumber

create view Query33 as
select SemesterID, ProfName,SUM(AmountofStudents) as semester_per_year
from Query32
group by SemesterID, ProfName

create view Query3 as
select Query31.SemesterID, Query33.ProfName, CoursesTaught, semester_per_year
from Query31 inner join Query33
on Query31.ProfName = Query33. ProfName
where Query31.SemesterID = Query33.SemesterID

-- Query4
/*
	This view corresponds to the third Query we were supposed to generate. 
	The view returns the amount of students who didn't get a D or D+ letter grade
	Query41 returns the amount of students in each semester
	Query42 documents how many students in each semester received a grade value of D or D+
	Query4 merges the two together and subtracts the amount of students that failed from the amount of total students
	Fulfilling the requirement of the question
	Filter by SemesterID to obtain the amount of students that passed
*/
drop view Query41
drop view Query42
drop view Query4

create view query41 as
select semesterid, count(standing.studentID) as StuAmount
from Standing
group by SemesterID
order by SemesterID

create view query42 as
select Courseoffering.SemesterID, count(distinct studentgrades.StudentID) as failures
from Courseoffering inner join StudentGrades
on Courseoffering.CourseOfferingID = StudentGrades.CourseOfferingID
where Grade in ('D','D+')
group by Courseoffering.SemesterID
order by SemesterID

create view query4 as
select query41.semesterid,(StuAmount - failures) as FantasticStudents
from query41 inner join query42
on query41.semesterid = query42.SemesterID
order by SemesterID

select*
from Query4
where SemesterID = 25

-- Query 5
/*
	This view corresponds to the fifth Query we were supposed to generate. 
	The view returns the number of students who made a grade of "C" or better and the percent from the total amount of students,
	the view returns the number of students who did not make a grade of "C" or better and the percent from the total amount of students, 
*/
drop view Query51
drop view Query52
drop view Query5

create view query51 as
select semesterid,  CourseSubject + ' ' + coursenumber as class, count(StudentGrades.studentID) as StuAmount
from CourseOffering inner join Course
on Course.CourseID = Courseoffering.CourseID
inner join StudentGrades
on CourseOffering.CourseOfferingID = StudentGrades.CourseOfferingID
where courseSubject in ('CSCI' ,'ISAT')
group by SemesterID, CourseSubject + ' ' + coursenumber

create view query52 as
select semesterid,  CourseSubject + ' ' + coursenumber as class, count(StudentGrades.studentID) as Failures
from CourseOffering inner join Course
on Course.CourseID = Courseoffering.CourseID
inner join StudentGrades
on CourseOffering.CourseOfferingID = StudentGrades.CourseOfferingID
where courseSubject in ('CSCI' ,'ISAT')and  Grade in ('D','D+')
group by SemesterID, CourseSubject + ' ' + coursenumber
order by SemesterID

create view query5 as
select query51.semesterid,(StuAmount - failures) as FantasticStudents, query52.class,
round(cast((StuAmount - failures) as float)/StuAmount,2) as FantasticPercent, failures, round(cast(failures as float)/StuAmount,2) as FailurePercent
from query51 inner join query52
on query51.semesterid = query52.SemesterID
where query51.class = query52.class
group by query51.semesterid,(StuAmount - failures), query52.class,
round(cast((StuAmount - failures) as float)/StuAmount,2), failures, round(cast(failures as float)/StuAmount,2)


--Query 6
/*
	This query receives the total number of students in every course offering and displays the results of every course in the Computer Science program that has less that 10 students partaking in it.
*/
drop view query6
create view Query6 as
select  Semester.SemesterID, CourseSubject, CourseNumber, Count(StudentID) as AmountofStudents
from CourseOffering inner join StudentGrades
on CourseOffering.CourseOfferingID = StudentGrades.CourseOfferingID
inner join Course
on Course.CourseID = CourseOffering.CourseID
inner join Semester
on courseoffering.SemesterID = Semester.SemesterID
where CourseSubject IN ('CSCI', 'ISAT')
group by Semester.SemesterID,CourseSubject, CourseNumber
having Count(StudentID) < 10

select* 
from Query6

--Query 7
/*
	This query receives all of the students within the Computer Science program for a given semester, and displays students whos GPA is within any desired range.
*/
drop view query7
create view Query7 as
select SemesterID, StudentID, Sum(Value * (credithours * 1)) as QP, Sum(credithours * 1) as CHHH, Round(Sum(Value * (CreditHOurs*1))/Sum(credithours * 1),3)  as GPA
from GPAINFO
where studentid < 201
group by SemesterID, StudentID

select semesterid, count(Gpa)
from Query7
where GPA <= 4 and GPA >= 3.5
group by Semesterid

--Query8
/*
	This query receives the GPA results of students under a given advisor during a selected semester,
	and displays the GPA results of that semester and the prior semester and shows the difference in GPA.
	This query only displays the students under any particular advisor whose GPA has decreased over time.
*/
drop view query81
drop view query82
drop view query8
create view Query81 as
select distinct  StudentAdvisors.SemesterID, studentadvisors.StudentID, ProfessorID, GPA
from [dbo].[StudentAdvisors] inner join studentGrades
on studentAdvisors.studentid = studentgrades.studentid
inner join Query7
on Query7.StudentID = StudentAdvisors.StudentID
where Query7.semesterID = studentAdvisors.semesterid
group by StudentAdvisors.SemesterID, ProfessorID, studentadvisors.StudentID, GPA

create view query82 as
select Schoolyear1.SemesterID, Schoolyear1.StudentID, Schoolyear1.ProfessorID, schoolyear1.GPA, 
	Schoolyear2.SemesterID as semesterid2, Schoolyear2.ProfessorID as professorid2, schoolyear2.GPA as gpa2, (schoolyear1.GPA - schoolyear2.GPA) as difference
from Query81 schoolyear1 inner join Query81 schoolyear2
on Schoolyear1.SemesterID = (Schoolyear2.SemesterID + 1)
where schoolyear1.studentid = schoolyear2.studentid
and  (schoolyear1.GPA - schoolyear2.GPA) < 0

create view Query8 as
select Semesterid, studentid,professorid,gpa,Semesterid2, professorid2, gpa2,ROUND(ABS(difference),3) as Decrease
from query82

-- Query9
/*
	This query provides the comparison of any students assigned to a given advisor that have failed a course and are retaking that course in the searched semester. 
	The query displays the students failed courses in the prior semester along with their grade, and displays the current status of their retaken course.
*/
drop view query99
drop view query98
drop view query9
create view query99 as
select studentID, courseName, semesterid, CourseSubject, coursenumber, Grade
from courseoffering inner join course
on courseoffering.courseid = course.courseid
inner join studentgrades
on studentgrades.courseofferingid = courseoffering.courseofferingid

create view query98 as
select  s1.studentid, s1.coursename, s1.semesterid, s1.coursesubject, s1.coursenumber, s1.grade, s2.semesterid as semester2, s2.grade as grade2
from query99 s1 inner join query99 s2
on s1.coursesubject = s2.coursesubject
where s1.coursenumber = s2.coursenumber
and s1.studentid = s2.studentid
and s1.semesterid < s2.semesterid

create view query9 as
select ProfessorID, Query98.studentid, studentadvisors.semesterid,coursename,coursesubject,coursenumber,Grade as [Initial attempt], semester2 as [Second Semester], Grade2 as [Final attempt]
from Query98 inner join studentadvisors
on query98.studentid = studentadvisors.studentid
where query98.semesterid = studentadvisors.semesterid



--Query1
select*
from QUERY1
where studentid = 128
and semesterid = 21

-- Query2
select*
from Query2

--Query3
select*
from Query3
where SemesterID IN (28,27,26)

--Query4
select*
from Query4

--Query5
select*
from Query5
order by semesterid

--Query6
select*
from Query6

--Query7
select*
from Query7
where studentid = 128

--Query8
select*
from Query8
where ProfessorID = 125

--Query9
select*
from Query9
where ProfessorID = 123
